datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod1 {
  provider = "prisma-zod-generator"
  output   = env("API_TRPC_DATA_MODEL_PRISMA_ZOD_DIR")
}

generator zod2 {
  provider                 = "zod-prisma"
  output                   = env("API_TRPC_DATA_MODEL_ZOD_PRISMA_DIR") // (default) the directory where generated zod schemas will be saved

  relationModel            = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports                  = "" // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

generator kysely {
  provider = "prisma-kysely"
  output   = env("API_TRPC_DATA_MODEL_KYSELY_TYPES_DIR")
  fileName = "types.ts"
}

generator docs {
  provider              = "node node_modules/prisma-docs-generator"
  output                = env("DATABASE_DOCS_DIR")
  includeRelationFields = true
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = env("DATABASE_DIAGRAMS_DIR")
  projectName         = "Digital Garage"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "DB ERD Schema for Digital Garage"
}

generator erd {
  provider  = "prisma-erd-generator"
  theme     = "default"
  output    = env("DATABASE_ERD_PATH")
  mmdcPath  = "node_modules/.bin"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  output = env("API_TRPC_DATA_MODEL_CLASSES_DIR")
}

generator prismabox {
  provider                    = "prismabox"
  output                      = env("API_TRPC_PRISMABOX_DIR")
  typeboxImportVariableName   = "t"
  typeboxImportDependencyName = "elysia"
  additionalProperties        = true
  inputModel                  = true
}

generator trpc {
  provider       = "prisma-trpc-generator"
  withZod        = true
  withMiddleware = true
  withShield     = true
  output         = env("API_TRPC_ROUTERS_ZOD_SCHEMAS_DIR")
  contextPath    = "../api/src/trpc"
  isGenerateSelect  = true
  isGenerateInclude = true
}

generator custom_generator {
  provider = "prisma-generator-fake-data"
  output   = env("DATABASE_FAKE_DATA_PATH")
}

generator express {
  provider = "prisma-generator-express"
  output   = env("DATABASE_EXPRESS_DIR")
}

enum AuthProvider {
  EMAIL_PASSWORD
  GOOGLE
  APPLE
}

enum AccountStatus {
  ONBOARDING
  SELECT_SUBSCRIPTION
  ACTIVE
}

enum SubscriptionPlan {
  DAY
  WEEK
  MONTH
  YEAR
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum PaymentStatus {
  PAID
  REFUNDED
  FAILED
}

enum TransferStatus {
  REQUESTED
  ACCEPTED
  REJECTED
}

enum FieldType {
  STRING
  NUMBER
  DATE
  BOOLEAN
}

enum PostCategory {
  GALLERY
  HISTORY
}

enum PostType {
  REMINDER
  INVOICE
  DOCUMENT
}

enum MediaFileType {
  IMAGE
  VIDEO
  DOCUMENT
}

model User {
  id                String                @id @default(uuid())
  email             String                @unique
  firstName         String?
  lastName          String?
  displayPictureId  String?               @unique
  displayPicture    MediaFile?            @relation(name: "UserDisplayPicture", fields: [displayPictureId], references: [id], onDelete: Cascade)
  location          String?
  accountStatus     AccountStatus         @default(ONBOARDING)
  sessions          Session[]
  vehicles          Vehicle[]
  posts             VehiclePost[]
  transfersReceived VehicleTransfer[]     @relation("receivedTransfers")
  transfersSent     VehicleTransfer[]     @relation("sentTransfers")
  subscription      Subscription?
  vehicleOwnerships VehicleOwnership[]    // Updated relation field
  accounts          Account[]             // New relation to the Account model

  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model Account {
  id              String        @id @default(uuid())
  provider        AuthProvider
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  firebaseUid     String
  isEmailVerified Boolean       @default(false)
  lastLogin       DateTime?
  sessions        Session[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([provider, userId])
}

model Session {
  id                String        @id @default(uuid())
  token             String        @unique
  expiresAt         DateTime
  accountId         String
  account           Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  deviceFingerprint String        @unique
  userId            String
  user              User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([deviceFingerprint, userId])

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Subscription {
  id            String              @id @default(uuid())
  productId     String
  plan          SubscriptionPlan?
  status        SubscriptionStatus  @default(ACTIVE)
  startDate     DateTime?
  endDate       DateTime?
  expiresAt     DateTime?
  userId        String              @unique
  user          User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments      Payment[]

  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Payment {
  id              String        @id @default(uuid())
  price           Float
  currencyCode    String
  status          PaymentStatus
  transactionId   String
  transactionDate DateTime
  subscriptionId  String
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model MediaFile {
  id                    String              @id @default(uuid())
  type                  MediaFileType
  mimeType              String
  fileName              String
  url                   String
  thumbnailUrl          String
  postId                String?
  post                  VehiclePost?        @relation(name: "GalleryOrHistoryFiles", fields: [postId], references: [id], onDelete: Cascade)
  userDisplayPicture    User?               @relation(name: "UserDisplayPicture")  // Removed onDelete here
  vehicleDisplayPhotoOwnership VehicleOwnership? @relation(name: "VehicleDisplayPhoto") // Removed onDelete here
  ownershipId           String?
  ownership             VehicleOwnership?   @relation(name: "OwnershipGalleryOrHistoryFiles", fields: [ownershipId], references: [id]) // Updated relation

  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model VehicleOwnership {
  id                     String            @id @default(uuid())
  userId                 String
  vehicleId              String
  overview               String?
  isCurrentOwner         Boolean           @default(true)
  vehicleDisplayPhotoId  String?           @unique
  vehicleDisplayPhoto    MediaFile?        @relation("VehicleDisplayPhoto", fields: [vehicleDisplayPhotoId], references: [id], onDelete: Cascade)
  startDate              DateTime          @default(now())
  endDate                DateTime?
  user                   User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle                Vehicle?          @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  posts                  VehiclePost[]
  vehicleFiles           MediaFile[]       @relation("OwnershipGalleryOrHistoryFiles")
  vehicleDetails         VehicleDetails?

  @@unique([userId, vehicleId])

  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model Vehicle {
  id                 String              @id @default(uuid())
  make               String
  model              String
  registrationNumber String              @unique
  ownerId            String
  owner              User?               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerships         VehicleOwnership[]  // Updated relation field
  transfers          VehicleTransfer[]

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model VehicleDetails {
  id                       String              @id @default(uuid())
  fromApi                  Boolean             @default(true)
  registrationNumber       String              // Removed `@unique` constraint to allow multiple entries
  make                     String
  model                    String
  yearOfManufacture        Int
  engineCapacity           Int
  fuelType                 String
  colour                   String
  taxStatus                String?
  taxDueDate               DateTime?
  motStatus                String?
  motExpiryDate            DateTime?
  co2Emissions             Int?
  markedForExport          Boolean?
  typeApproval             String?
  wheelplan                String?
  artEndDate               DateTime?
  monthOfFirstRegistration DateTime?
  euroStatus               String?
  dateOfLastV5CIssued      DateTime?
  realDrivingEmissions     String?
  revenueWeight            Int?

  ownershipId              String             @unique
  ownership                VehicleOwnership?  @relation(fields: [ownershipId], references: [id]) // Updated relation

  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
}

model VehicleTransfer {
  id            String          @id @default(uuid())
  vehicleId     String
  vehicle       Vehicle?        @relation(fields: [vehicleId], references: [id])
  senderId      String
  sender        User?           @relation("sentTransfers", fields: [senderId], references: [id])
  recipientId   String
  recipient     User?           @relation("receivedTransfers", fields: [recipientId], references: [id])
  status        TransferStatus  @default(REQUESTED)
  transferDate  DateTime        @default(now())
  responseDate  DateTime?
  reason        String?         // Reason for transfer
  excludedMediaFileTypes MediaFileType[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model VehiclePost {
  id           String              @id @default(uuid())
  title        String
  category     PostCategory        @default(GALLERY)
  description  String?
  type         PostType?
  files        MediaFile[]         @relation("GalleryOrHistoryFiles")
  createdById  String
  createdBy    User?               @relation(fields: [createdById], references: [id])
  ownershipId  String
  ownership    VehicleOwnership?   @relation(fields: [ownershipId], references: [id], onDelete: Cascade) // Updated relation

  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}
